// Regular expressions on input strings of length 4, per Kim et al. 2021.
// The input is encoded as a sequence of integers s_0, ... s_n.

(synth-fun match_regex ( (s_0 Int) (s_1 Int) (s_2 Int) (s_3 Int) (len Int)) ((result Bool)) (
  Start : (Start.Sem(Term Int Int Int Int Int Bool)) : t
  [() (Start.Sem t s_0 s_1 s_2 s_3 len result)]
  (
    // Evaluate regex on all substrings, return corner element
    (eval R:r)
    [
        ( (X_0_0 Bool) (X_0_1 Bool) (X_0_2 Bool) (X_0_3 Bool) (X_0_4 Bool) (X_1_1 Bool) (X_1_2 Bool) (X_1_3 Bool) (X_1_4 Bool) (X_2_2 Bool) (X_2_3 Bool) (X_2_4 Bool) (X_3_3 Bool) (X_3_4 Bool) (X_4_4 Bool) )
        (and
            (= t (Eval r))
            (R.Sem r s_0 s_1 s_2 s_3 len X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4)
            (= result X_0_4)
        )
    ]
  )
)
(
  R : (R.Sem(Term Int Int Int Int Int Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool)) : t
  [ ( (X_0_0 Bool) (X_0_1 Bool) (X_0_2 Bool) (X_0_3 Bool) (X_0_4 Bool) (X_1_1 Bool) (X_1_2 Bool) (X_1_3 Bool) (X_1_4 Bool) (X_2_2 Bool) (X_2_3 Bool) (X_2_4 Bool) (X_3_3 Bool) (X_3_4 Bool) (X_4_4 Bool) ) (R.Sem t s_0 s_1 s_2 s_3 len X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4) ]
  (
    // epsilon: identity matrix (set of empty strings)
    eps [() (and (= t (Leaf 'eps')) (= X_0_0 true) (= X_0_1 false) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 true) (= X_1_2 false) (= X_1_3 false) (= X_1_4 false) (= X_2_2 true) (= X_2_3 false) (= X_2_4 false) (= X_3_3 true) (= X_3_4 false) (= X_4_4 true) )]
    
    // phi: zero matrix (empty set)
    phi [() (and (= t (Leaf 'phi')) (= X_0_0 false) (= X_0_1 false) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 false) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 false) (= X_2_4 false) (= X_3_3 false) (= X_3_4 false) (= X_4_4 false) )]
    
    // characters
    char_0 [() (and (= t (Leaf '0')) (= X_0_0 false) (= X_0_1 (= s_0 0)) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 (= s_1 0)) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 (= s_2 0)) (= X_2_4 false) (= X_3_3 false) (= X_3_4 (= s_3 0)) (= X_4_4 false))]
    char_1 [() (and (= t (Leaf '1')) (= X_0_0 false) (= X_0_1 (= s_0 1)) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 (= s_1 1)) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 (= s_2 1)) (= X_2_4 false) (= X_3_3 false) (= X_3_4 (= s_3 1)) (= X_4_4 false))]
    char_2 [() (and (= t (Leaf '2')) (= X_0_0 false) (= X_0_1 (= s_0 2)) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 (= s_1 2)) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 (= s_2 2)) (= X_2_4 false) (= X_3_3 false) (= X_3_4 (= s_3 2)) (= X_4_4 false))]
    char_3 [() (and (= t (Leaf '3')) (= X_0_0 false) (= X_0_1 (= s_0 3)) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 (= s_1 3)) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 (= s_2 3)) (= X_2_4 false) (= X_3_3 false) (= X_3_4 (= s_3 3)) (= X_4_4 false))]
    
    // any (regex dot)
    any [() (and (= t (Leaf '.')) (= X_0_0 false) (= X_0_1 true) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 false) (= X_1_2 true) (= X_1_3 false) (= X_1_4 false) (= X_2_2 false) (= X_2_3 true) (= X_2_4 false) (= X_3_3 false) (= X_3_4 true) (= X_4_4 false))]
    
    // Disjunction
    (or R:t1 R:t2)
    [ 
        ( (A_0_0 Bool) (A_0_1 Bool) (A_0_2 Bool) (A_0_3 Bool) (A_0_4 Bool) (A_1_1 Bool) (A_1_2 Bool) (A_1_3 Bool) (A_1_4 Bool) (A_2_2 Bool) (A_2_3 Bool) (A_2_4 Bool) (A_3_3 Bool) (A_3_4 Bool) (A_4_4 Bool) (B_0_0 Bool) (B_0_1 Bool) (B_0_2 Bool) (B_0_3 Bool) (B_0_4 Bool) (B_1_1 Bool) (B_1_2 Bool) (B_1_3 Bool) (B_1_4 Bool) (B_2_2 Bool) (B_2_3 Bool) (B_2_4 Bool) (B_3_3 Bool) (B_3_4 Bool) (B_4_4 Bool)         )
        (and
            (= t (Or t1 t2))
            (R.Sem t1 s_0 s_1 s_2 s_3 len A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4)
            (R.Sem t2 s_0 s_1 s_2 s_3 len B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4)
            
            // X = A+B
            (= X_0_0 (or A_0_0 B_0_0)) (= X_0_1 (or A_0_1 B_0_1)) (= X_0_2 (or A_0_2 B_0_2)) (= X_0_3 (or A_0_3 B_0_3)) (= X_0_4 (or A_0_4 B_0_4)) (= X_1_1 (or A_1_1 B_1_1)) (= X_1_2 (or A_1_2 B_1_2)) (= X_1_3 (or A_1_3 B_1_3)) (= X_1_4 (or A_1_4 B_1_4)) (= X_2_2 (or A_2_2 B_2_2)) (= X_2_3 (or A_2_3 B_2_3)) (= X_2_4 (or A_2_4 B_2_4)) (= X_3_3 (or A_3_3 B_3_3)) (= X_3_4 (or A_3_4 B_3_4)) (= X_4_4 (or A_4_4 B_4_4))
        )
    ]
    
    // Concatenation
    (concat R:t1 R:t2)
    [
        (
            (A_0_0 Bool) (A_0_1 Bool) (A_0_2 Bool) (A_0_3 Bool) (A_0_4 Bool) (A_1_1 Bool) (A_1_2 Bool) (A_1_3 Bool) (A_1_4 Bool) (A_2_2 Bool) (A_2_3 Bool) (A_2_4 Bool) (A_3_3 Bool) (A_3_4 Bool) (A_4_4 Bool)
            (B_0_0 Bool) (B_0_1 Bool) (B_0_2 Bool) (B_0_3 Bool) (B_0_4 Bool) (B_1_1 Bool) (B_1_2 Bool) (B_1_3 Bool) (B_1_4 Bool) (B_2_2 Bool) (B_2_3 Bool) (B_2_4 Bool) (B_3_3 Bool) (B_3_4 Bool) (B_4_4 Bool)
        )
        (and
            (= t (Concat t1 t2))
            (R.Sem t1 s_0 s_1 s_2 s_3 len A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4)
            (R.Sem t2 s_0 s_1 s_2 s_3 len B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4)
            
            // X = AB
            (= X_0_0 (or (and A_0_0 B_0_0))) (= X_0_1 (or (and A_0_0 B_0_1) (and A_0_1 B_1_1))) (= X_0_2 (or (and A_0_0 B_0_2) (and A_0_1 B_1_2) (and A_0_2 B_2_2))) (= X_0_3 (or (and A_0_0 B_0_3) (and A_0_1 B_1_3) (and A_0_2 B_2_3) (and A_0_3 B_3_3))) (= X_0_4 (or (and A_0_0 B_0_4) (and A_0_1 B_1_4) (and A_0_2 B_2_4) (and A_0_3 B_3_4) (and A_0_4 B_4_4))) (= X_1_1 (or (and A_1_1 B_1_1))) (= X_1_2 (or (and A_1_1 B_1_2) (and A_1_2 B_2_2))) (= X_1_3 (or (and A_1_1 B_1_3) (and A_1_2 B_2_3) (and A_1_3 B_3_3))) (= X_1_4 (or (and A_1_1 B_1_4) (and A_1_2 B_2_4) (and A_1_3 B_3_4) (and A_1_4 B_4_4))) (= X_2_2 (or (and A_2_2 B_2_2))) (= X_2_3 (or (and A_2_2 B_2_3) (and A_2_3 B_3_3))) (= X_2_4 (or (and A_2_2 B_2_4) (and A_2_3 B_3_4) (and A_2_4 B_4_4))) (= X_3_3 (or (and A_3_3 B_3_3))) (= X_3_4 (or (and A_3_3 B_3_4) (and A_3_4 B_4_4))) (= X_4_4 (or (and A_4_4 B_4_4)))
        )
    ]
    
    // Star: base case
    (star_eps R:t1)
    [ () (and (= t (Star t1)) (= len 0) (= X_0_0 true) (= X_0_1 false) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) (= X_1_1 true) (= X_1_2 false) (= X_1_3 false) (= X_1_4 false) (= X_2_2 true) (= X_2_3 false) (= X_2_4 false) (= X_3_3 true) (= X_3_4 false) (= X_4_4 true) )]
    
    // Star: inductive case
    (star R:t1)
    [
        (
            (A_0_0 Bool) (A_0_1 Bool) (A_0_2 Bool) (A_0_3 Bool) (A_0_4 Bool) (A_1_1 Bool) (A_1_2 Bool) (A_1_3 Bool) (A_1_4 Bool) (A_2_2 Bool) (A_2_3 Bool) (A_2_4 Bool) (A_3_3 Bool) (A_3_4 Bool) (A_4_4 Bool) // X
            (B_0_0 Bool) (B_0_1 Bool) (B_0_2 Bool) (B_0_3 Bool) (B_0_4 Bool) (B_1_1 Bool) (B_1_2 Bool) (B_1_3 Bool) (B_1_4 Bool) (B_2_2 Bool) (B_2_3 Bool) (B_2_4 Bool) (B_3_3 Bool) (B_3_4 Bool) (B_4_4 Bool) // X_{len-1}
            (nxt Int) //!
        )
        (and
            (= t (Star t1))
            (= nxt (- len 1))
            (R.Sem t1 s_0 s_1 s_2 s_3    len    A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4)
            (R.Sem t  s_0 s_1 s_2 s_3    nxt   B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4)
            
            // X = (X X_{len-1}) + X_{len-1}
            (= X_0_0 (or B_0_0 (and A_0_0 B_0_0))) (= X_0_1 (or B_0_1 (and A_0_0 B_0_1) (and A_0_1 B_1_1))) (= X_0_2 (or B_0_2 (and A_0_0 B_0_2) (and A_0_1 B_1_2) (and A_0_2 B_2_2))) (= X_0_3 (or B_0_3 (and A_0_0 B_0_3) (and A_0_1 B_1_3) (and A_0_2 B_2_3) (and A_0_3 B_3_3))) (= X_0_4 (or B_0_4 (and A_0_0 B_0_4) (and A_0_1 B_1_4) (and A_0_2 B_2_4) (and A_0_3 B_3_4) (and A_0_4 B_4_4))) (= X_1_1 (or B_1_1 (and A_1_1 B_1_1))) (= X_1_2 (or B_1_2 (and A_1_1 B_1_2) (and A_1_2 B_2_2))) (= X_1_3 (or B_1_3 (and A_1_1 B_1_3) (and A_1_2 B_2_3) (and A_1_3 B_3_3))) (= X_1_4 (or B_1_4 (and A_1_1 B_1_4) (and A_1_2 B_2_4) (and A_1_3 B_3_4) (and A_1_4 B_4_4))) (= X_2_2 (or B_2_2 (and A_2_2 B_2_2))) (= X_2_3 (or B_2_3 (and A_2_2 B_2_3) (and A_2_3 B_3_3))) (= X_2_4 (or B_2_4 (and A_2_2 B_2_4) (and A_2_3 B_3_4) (and A_2_4 B_4_4))) (= X_3_3 (or B_3_3 (and A_3_3 B_3_3))) (= X_3_4 (or B_3_4 (and A_3_3 B_3_4) (and A_3_4 B_4_4))) (= X_4_4 (or B_4_4 (and A_4_4 B_4_4)))
        )
    ]
  )
)
)


// Specification (will get translated into constraint => realizable + check realizable)
(constraint 
    (and
       // Target regex: (02)* or 02..
       (Start.Sem t 0 0 0 0 4 false)
       (Start.Sem t 0 2 0 2 4 true)
       (Start.Sem t 0 2 0 0 4 true)
       (Start.Sem t 0 2 1 3 4 true)
       (Start.Sem t 1 2 0 2 4 false)
       (Start.Sem t 0 3 0 2 4 false)
    )
)